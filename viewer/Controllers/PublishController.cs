using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNetCore.SignalR;
using Microsoft.AspNetCore.Mvc;
using viewer.Hubs;
using Microsoft.Azure.EventGrid;
using Microsoft.Azure.EventGrid.Models;
using viewer.Models;

namespace viewer.Controllers
{
    [Route("api/[controller]")]
    public class PublishController : Controller
    {
        private bool EventTypeSubcriptionValidation
            => HttpContext.Request.Headers["aeg-event-type"].FirstOrDefault() ==
               "SubscriptionValidation";

        private bool EventTypeNotification
            => HttpContext.Request.Headers["aeg-event-type"].FirstOrDefault() ==
               "Notification";

        private readonly IHubContext<GridEventsHub> _hubContext;

        public PublishController(IHubContext<GridEventsHub> gridEventsHubContext)
        {
            this._hubContext = gridEventsHubContext;
        }

        // GET: api/Publish
        //[HttpGet]
        //public IEnumerable<string> Get()
        //{
        //    return new string[] { "value1", "value2" };
        //}

        // GET: api/Publish
        [HttpGet]
        public void Get()
        {
            var warranty = GetWarranty();
            string topicEndpoint = "https://rwr-dev-use-topic.eastus-1.eventgrid.azure.net/api/events";
            string topicKey = "fYqGo5dJvyLZJP7LHLGBuo0Xinn1RCBdOxCcTfGavYM=";

            string topicHostname = new Uri(topicEndpoint).Host;
            TopicCredentials topicCredentials = new TopicCredentials(topicKey);
            EventGridClient client = new EventGridClient(topicCredentials);

            List<EventGridEvent> eventsList = new List<EventGridEvent>();

            for (int i = 0; i < 1; i++)
            {
                eventsList.Add(new EventGridEvent()
                {
                    Id = Guid.NewGuid().ToString(),
                    EventType = "Warranty_Issued",
                    Data = warranty,
                    EventTime = DateTime.Now,
                    Subject = "Warranty_Issued",
                    DataVersion = "1.0"
                });
            }

            client.PublishEventsAsync(topicHostname, eventsList).GetAwaiter().GetResult();
        }

        public ProgressWarranty GetWarranty()
        {
            var warranty = new ProgressWarranty()
            {
                WarrantyId = "1000",
                ContractorNumber = "20",
                WarrantyCode = "ENOA",
                RoofAddress1 = "Wind Addendum",
                BuildingDetails = "RoofAddress2",
                OwnerFirstName = "Bob",
                OwnerLastName = "Smith",
                OwnerPhone = "212-123-1234",
                OwnerEmailAddress = "bsmith@gmail.com",
                BuildingCity = "NY",
                BuildingState = "NY",
                BuildingZip = "10010",
                MailOwnerCountry = "USA",
                MailOwnerFirstName = "Bob",
                MailOwnerLastName = "Smith",
                MailWarrantyAddress1 = "1234 Main St",
                MailWarrantyAddress2 = "Suite 200",
                MailWarrantyCity = "NY",
                MailWarrantyState = "NY",
                MailWarrantyZip = "10020",
                MailOwnerPhone = "212-123-1234",
                TotalCostToCustomer = "150",
                PayMethod = "P",
                Active = "1",
                SteepSlopeSquares = "222",
                LowSlopeSquares = "222",
                BuildingCountry = "USA",
                Webchui = "1",
                FormCode = "AutoGenerated",
                Partial = "0",
                InstContractorNumber = "ME02324",
                BuildingType = "Commercial",
                RoofJobFormDetails = "Details",
                WarrentyPaymentPostedDate = DateTime.Now,
                UserCreated = "User",
                UserModified = "User",
                DateCreated = DateTime.Now,
                DateModified = DateTime.Now
            };

            return warranty;        
        }


        // GET: api/Publish/5
        //[HttpGet("{id}", Name = "Get")]
        //public string Get(int id)
        //{
        //    return "value";
        //}

        //// POST: api/Publish
        //[HttpPost]
        //public void Post([FromBody] string value)
        //{
        //}

        //// PUT: api/Publish/5
        //[HttpPut("{id}")]
        //public void Put(int id, [FromBody] string value)
        //{
        //}

        //// DELETE: api/ApiWithActions/5
        //[HttpDelete("{id}")]
        //public void Delete(int id)
        //{
        //}
    }
}
